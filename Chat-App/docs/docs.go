// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Производит авторизацию пользователя по имени пользователя и паролю, возвращая токен для доступа",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Авторизация пользователя",
                "parameters": [
                    {
                        "description": "Данные для входа",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.LoginInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Токен доступа",
                        "schema": {
                            "$ref": "#/definitions/swg.TokenResponse"
                        }
                    },
                    "401": {
                        "description": "Неверные данные для входа",
                        "schema": {
                            "$ref": "#/definitions/swg.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Ошибка генерации токена",
                        "schema": {
                            "$ref": "#/definitions/swg.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Регистрирует нового пользователя с указанием имени и пароля",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Регистрация нового пользователя",
                "parameters": [
                    {
                        "description": "Данные пользователя",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.RegisterInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Пользователь успешно зарегистрирован",
                        "schema": {
                            "$ref": "#/definitions/swg.SuccessResponse"
                        }
                    },
                    "409": {
                        "description": "Имя пользователя или почта уже используется",
                        "schema": {
                            "$ref": "#/definitions/swg.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Ошибка хеширования или создания пользователя",
                        "schema": {
                            "$ref": "#/definitions/swg.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/rooms": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Получения списка доступных комнат после авторизации",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rooms"
                ],
                "summary": "Получения списка комнат",
                "responses": {
                    "200": {
                        "description": "Список комнат",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/chat.Room"
                            }
                        }
                    },
                    "401": {
                        "description": "Требуется авторизация",
                        "schema": {
                            "$ref": "#/definitions/swg.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Не удалось получить список комнат",
                        "schema": {
                            "$ref": "#/definitions/swg.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Создаёт комнату для подключения пользователей",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rooms"
                ],
                "summary": "Создание комнаты",
                "parameters": [
                    {
                        "description": "Данные комнаты",
                        "name": "room",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/chat.Room"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Созданная комната",
                        "schema": {
                            "$ref": "#/definitions/chat.Room"
                        }
                    },
                    "401": {
                        "description": "Неверный токен",
                        "schema": {
                            "$ref": "#/definitions/swg.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Комната с таким названием уже существует",
                        "schema": {
                            "$ref": "#/definitions/swg.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Не удалось создать комнату",
                        "schema": {
                            "$ref": "#/definitions/swg.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/rooms/{room_id}/messages": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Получения истории чата комнаты после авторизации",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rooms"
                ],
                "summary": "Получения истории чата комнаты",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID комнаты",
                        "name": "room_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/ws/{room_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Устанавливает WebSocket-соединение с указанной комнатой. Используйте ws:// или wss:// для подключения.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ws"
                ],
                "summary": "Подключение к комнате",
                "parameters": [
                    {
                        "description": "Сообщение",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ws.Message"
                        }
                    },
                    {
                        "type": "integer",
                        "description": "ID комнаты",
                        "name": "room_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Неверный ID комнаты",
                        "schema": {
                            "$ref": "#/definitions/swg.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Не удалось найти пользователя",
                        "schema": {
                            "$ref": "#/definitions/swg.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "auth.LoginInput": {
            "type": "object",
            "required": [
                "email_or_username",
                "password"
            ],
            "properties": {
                "email_or_username": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "auth.RegisterInput": {
            "type": "object",
            "required": [
                "email",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "chat.Room": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "swg.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "swg.SuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "swg.TokenResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "ws.Message": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
